1) Что такое двустороннее связывание? - связывание графического интерфейса с реактивными данными.
2) Как осуществить двустороннее связывание? - v-model или слушать на интуп.
3) Что такое props? - способ передачи переменных из родительского компонента в дочерний.
4) Что такое emit и для чего он нужен? - для того чтобы возвращать данные из дочернего компонента в родительского.
5) Как сделать систему роутинга или навигации в Vue? vue-router?
6) Зачем нужны computed свойства? Допустим у нас есть реактивный счетчик, а также реактивный вывод длины массива. Допустим произошла ситуация, когда нам стало необходимо выводить длину массива в два раза больше, тогда у нас есть выбор между методом и компьютед свойством. При использовании метода, его вызов будет производиться каждый раз при перередере страницы (то есть при увиличении счетчика, перерасчет длина массива тоже будет увеличиваться). При этом если бы мы использовали компьютед свойство, то метод вызывался бы лишь тогда, когда изменяется сам массив. Компьютед свойство позволяет кешировать результат каких-либо вычислений.
7) Как отследить изменение модели или как наблюдать за моделью и добавлять свой функционал? watch()
8) Банальные директивы v-if, v-else (как выводить данные по условию)?
9) В чем разница v-show и v-if? v-show добавляет display none.
10) Что такое mixin и для чего они нужны? Для расширение компонента и переиспользования кода.
11) Жизненный цикл компонента? Сначала инициализируются ивенты и хук beforeCreate. После инициализируются реактивные данные и хук created. После created компилируется сам шаблон и вызывается хук mounted, на этом этапе обычно производятся запросы к серверу, первичную инициализацию. Затем обновление компонента updeted и под конец демонтирование объекта - удалять слушатели и очищать глобальное хранилища.
12) Что такое v-for и для чего ему нужен key? Под капотом у vue есть virtual dom, который оптимизирует перерендер страницы путем изменения сразу нескольких узлов дом дерева. При оптимизации рендера списков элементов vue сложно найти какой именно элемент был удален или изменен из списка, поэтому и нужен key ключ, которому желательно присваивать уникальные поля (id), чтобы вью могу сделать перерендер без артефактов.
13) Какие модификатора есть у директивы v-model? number, lazy, trim. Number приводит данные с инпута сразу к типу number, trim удаляет пробелы с начала и конца, lazy делает так, чтобы у поля ввода была прослушка события onchange, вместо события input. То есть данные изменяться только после того как инпут потеряет фокус.
14) Как в методах обратиться к дом элементу? ref.
15) keep-alive зачем нужен и как использовать. Допустип у нас есть два компонента, которые отрисовывются по условию (используем директиву is), тогда при перерендере компонента без keep-alive, он будет демонтироваться и его данные соответсвенно будут удаляться, при обвертке в виде keep-alive компоненты демонтироваться не будут.
16) В какой очередности будут срабатывать жизненные хуки сначала в компоненте или у mixin? mixin->component
17) Что такое vuex и какие проблемы он решает. Vuex это библиотека для vue, которая позволяет использовать паттерн для управлением состоянием и служит централизованным хранилищем для всех данных, любой компонент может получить данные из хранилища без props и тому подобное.
18) Расскажите о state getters mutations actions в vuex. getters является способом получения данных из глобального объекта state, в котором находятся все данные стора. Мутации являются единтсвенным способом изменения стэйта, а в actions производятся различные side-эффекты, запросы на сервер, при этом позволяют вызывать в себе мутации для изменения стора.
19) Как замапить state getters actions, mutations? - mapState, mapGetters...
